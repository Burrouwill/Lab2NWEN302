#! /usr/bin/env python3
"""
NWEN 302 Lab 2
Learning Switch Main File
Do not edit this file. (You should be editing the file lswitch.py.)

Please report bugs to the author.

Copyright (C) 2023 by Alvin Valera <alvin.valera@vuw.ac.nz>
All rights reserved.
"""

import sys
import os
import socket
import logging
import lswitch
import struct


MAX_INTERFACES = 20
ETH_P_ALL = 0x0003
INFO_IFNAME = 0
INFO_PKTTYPE = 2


# This is the main function
def main():
    logging.basicConfig(stream=sys.stderr, level=logging.DEBUG)
    
    print('Starting learning switch...')
    
    num_interfaces = 3
    interface_names = []
    
    # Check for command-line arguments
    # For now, we only accept a single argument which should be the number
    # of interfaces connected to the switch
    args = sys.argv[1:]
    if len(args) == 1:
        num_interfaces = int(args[0])
        if num_interfaces > MAX_INTERFACES:
            num_interfaces = MAX_INTERFACES
        
        
    # Reconfigure the switch
    for i in range(num_interfaces):
        if i >= 3:
            cmd = 'brctl addif br0 eth%d' % i
            logging.debug('Executing %s' %cmd)
            os.system(cmd)
        cmd = 'bridge link set dev eth%d learning off' % i
        logging.debug('Executing %s' %cmd)
        os.system(cmd)
        interface_names.append('eth%d' % i)
    cmd = 'brctl setageing br0 10000'
    logging.debug('Executing %s' %cmd)
    os.system(cmd)
    
    
    # Create a raw socket to snoop for packets
    logging.debug('Creating raw socket to listen for packets')
    raw_socket = socket.socket(socket.AF_PACKET, socket.SOCK_RAW, socket.htons(ETH_P_ALL))
    
    
    # Initialize learning switch class
    lswitch.init()
    
    
    # Main loop to receive data from tap interface 
    while True:
        pkt, info = raw_socket.recvfrom(1500)
        if info[INFO_PKTTYPE] != socket.PACKET_OUTGOING:
            dev = info[INFO_IFNAME]
            logging.debug('Received frame thru interface %s.' % dev)
            # Handle packet
            if dev in interface_names:
                dest_mac, src_mac = struct.unpack('!6s6s', pkt[0:12])            
                lswitch.receive_frame(src_mac, dest_mac, dev)
        
        
    # Close socket
    raw_socket.close()

if __name__ == '__main__':
    main()
